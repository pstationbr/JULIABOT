const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const RSSParser = require('rss-parser');
const axios = require('axios');
const cron = require('node-cron');
const parser = new RSSParser();

const mysql = require('mysql2');

// Configura√ß√£o do banco de dados MySQL
const db = mysql.createConnection({
    host: 'LOCALHOST',
    user: 'ROOT',
    password: 'SENHA',
    database: 'BANCODEDADOS'
});

db.connect((err) => {
    if (err) {
        console.error('Erro ao conectar ao banco de dados:', err);
    } else {
        console.log('Conectado ao banco de dados MySQL');
    }
});

// N√∫mero do administrador
const adminPhoneNumber = '551234567890'; // Substitua pelo n√∫mero de telefone do admin

// Inicializa o cliente do WhatsApp
const client = new Client({
    authStrategy: new LocalAuth()
});

client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Client is ready!');
});

// Trata eventos de desconex√£o e reconex√£o
client.on('disconnected', (reason) => {
    console.log('Client was logged out', reason);
    client.initialize();
});

client.on('auth_failure', () => {
    console.error('AUTHENTICATION FAILURE');
});

// Busca not√≠cias do feed RSS
async function fetchNews() {
    const feed = await parser.parseURL('https://tecnoblog.net/feed/');
    let news = '√öltimas not√≠cias:\n\n';
    feed.items.slice(0, 5).forEach(item => {
        news += `*${item.title}*\n${item.link}\n\n`;
    });
    return news;
}

// Busca frases b√≠blicas de uma API em portugu√™s
async function fetchBibleVerse() {
    try {
        const response = await axios.get('https://www.abibliadigital.com.br/api/verses/nvi/random');
        const verse = response.data.text;
        const book = response.data.book.name;
        const chapter = response.data.chapter;
        const number = response.data.number;
        return `${verse} - ${book} ${chapter}:${number}`;
    } catch (error) {
        console.error('Erro ao buscar frase b√≠blica:', error);
        return 'Desculpe, n√£o consegui buscar um vers√≠culo b√≠blico no momento.';
    }
}

// Envia not√≠cias para um contato espec√≠fico
async function sendNewsToContact(contactId) {
    const news = await fetchNews();
    client.sendMessage(contactId, news);
}

// Fun√ß√£o para enviar broadcast
async function broadcastMessage(message) {
    db.query('SELECT chat_id FROM users', (err, results) => {
        if (err) throw err;

        results.forEach(row => {
            client.sendMessage(row.chat_id, message);
        });
    });
}

// Fun√ß√£o para enviar mensagem de bom dia
async function sendGoodMorning() {
    const message = 'Bom dia! Que seu dia seja aben√ßoado e cheio de alegria! üòä';
    db.query('SELECT chat_id FROM users', (err, results) => {
        if (err) throw err;

        results.forEach(row => {
            client.sendMessage(row.chat_id, message);
        });
    });
}

// Agendar mensagem de bom dia para √†s 7:00 da manh√£ no hor√°rio de Bras√≠lia
cron.schedule('0 7 * * *', () => {
    console.log('Enviando mensagem de bom dia');
    sendGoodMorning();
}, {
    timezone: "America/Sao_Paulo"
});

// Monitorando mensagens
client.on('message', async msg => {
    if (msg.body.toLowerCase() === 'not√≠cias') {
        const news = await fetchNews();
        msg.reply(news);
    } else if (msg.body.toLowerCase() === 'vers√≠culo') {
        const verse = await fetchBibleVerse();
        msg.reply(verse);
    } else if (msg.body.toLowerCase() === 'start') {
        const welcomeMessage = `Ol√° ${msg.from.split('@')[0]}, Meu nome √© Julia. Sou uma IA criada pelos Jovens da M√≠dia e minhas fun√ß√µes s√£o falar um vers√≠culo da B√≠blia, mostrar as not√≠cias do mundo, mandar mensgaem de bom dia! Em breve terei mais fun√ß√µes.`;
        msg.reply(welcomeMessage);

        // Salvar novo usu√°rio no banco de dados
        db.query('INSERT INTO users (chat_id) VALUES (?)', [msg.from], (err) => {
            if (err && err.code !== 'ER_DUP_ENTRY') {
                console.error('Erro ao salvar usu√°rio:', err);
            }
        });
    }
});

// Administrador envia broadcast
client.on('message', async msg => {
    if (msg.from.includes(adminPhoneNumber) && msg.body.startsWith('/broadcast ')) {
        const message = msg.body.replace('/broadcast ', '');
        broadcastMessage(message);
        msg.reply('Mensagem enviada para todos os usu√°rios.');
    }
});

client.initialize();

/*

ESSE PROJETO FOI DESENVOLVIDO POR PAULO RICARDO IG: @PAULOSTATION
COPYRIGHT 2024 - TODOS OS DIREITOS RESERVADOS A PAULO!
NODEJS, WHATSAPP-WEB.JS, QRCODE-TERMINAL.JS, AXIOS, RSS, CRONJOB, MYSQL

*/
